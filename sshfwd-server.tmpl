#!/bin/bash

### BEGIN INIT INFO
# Provides:       sshfwd-server
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       start an array of ssh tunnels on localhost in the background
### END INIT INFO

if [ "$(/usr/bin/whoami)" != "root" ] ; then
    echo "Only super user could run this script"
    exit 1
fi

#. /lib/lsb/init-functions

#. /lib/init/vars.sh
#. /etc/init.d/functions

user=xma11

cmd_ssh="/usr/bin/ssh -o ConnectTimeout=15"
cmd_sshpass="/usr/bin/sshpass"

t0_listen_address="127.0.0.1"
t0_listen_port="8888"
t0_remote_host="1.2.3.4"
t0_remote_port="22"
t0_remote_user="someone"

t1_listen_address="127.0.0.1"
t1_listen_port="8889"
t1_remote_host="1.2.3.5"
t1_remote_port="22"
t1_remote_user="someone"

t2_listen_address="127.0.0.1"
t2_listen_port="8890"
t2_remote_host="1.2.3.6"
t2_remote_port="22"
t2_remote_user="someone"

t3_listen_address="127.0.0.1"
t3_listen_port="8891"
t3_remote_host="1.2.3.7"
t3_remote_port="22"
t3_remote_user="someone"
t3_user_password="password"


proc_main=""
proc0=""
proc1=""
proc2=""
proc3=""

fn_get_procs() {
    proc_main=`ps aux | grep sshfwd-server | grep start | grep -v "$$" | grep -v grep | awk '{printf "%s ",$2}'`
    proc0=`ps aux | grep ssh | grep $t0_listen_port | grep $t0_remote_user | grep $t0_remote_host| grep -v grep | awk '{printf "%s ",$2}'`
    proc1=`ps aux | grep ssh | grep $t1_listen_port | grep $t1_remote_user | grep $t1_remote_host| grep -v grep | awk '{printf "%s ",$2}'`
    proc2=`ps aux | grep ssh | grep $t2_listen_port | grep $t2_remote_user | grep $t2_remote_host| grep -v grep | awk '{printf "%s ",$2}'`
    proc3=`ps aux | grep ssh | grep $t3_listen_port | grep $t3_remote_user | grep $t3_remote_host| grep -v grep | awk '{printf "%s ",$2}'`
}

fn_get_procs

fn_start() {
    if [ "" = "$proc0" ]; then
        su -l $user -c "$cmd_ssh -N -C -f -D$t0_listen_address:$t0_listen_port -p $t0_remote_port $t0_remote_user@$t0_remote_host"
        if [ $? = 0 ]; then
            echo "tunnel 0 (to $t0_remote_host) started"
        else
            echo "failed to start tunnel 0 (to $t0_remote_host)"
        fi
    else
        echo "tunnel 0 (to $t0_remote_host) is already running (pid=$proc0)"
    fi

    if [ "" = "$proc1" ]; then
        su -l $user -c "$cmd_ssh -N -C -f -D$t1_listen_address:$t1_listen_port -p $t1_remote_port $t1_remote_user@$t1_remote_host"
        if [ $? = 0 ]; then
            echo "tunnel 1 (to $t1_remote_host) started"
        else
            echo "failed to start tunnel 1 (to $t1_remote_host)"
        fi
    else
        echo "tunnel 1 (to $t1_remote_host) is already running (pid=$proc1)"
    fi

    if [ "" = "$proc2" ]; then
        su -l $user -c "$cmd_ssh -N -C -f -D$t2_listen_address:$t2_listen_port -p $t2_remote_port $t2_remote_user@$t2_remote_host"
        if [ $? = 0 ]; then
            echo "tunnel 2 (to $t2_remote_host) started"
        else
            echo "failed to start tunnel 2 (to $t2_remote_host)"
        fi
    else
        echo "tunnel 2 (to $t2_remote_host) is already running (pid=$proc2)"
    fi

    if [ "" = "$proc3" ]; then
        su -l $user -c "$cmd_sshpass -p$t3_user_password $cmd_ssh -N -C -f -D$t3_listen_address:$t3_listen_port -p $t3_remote_port -o PreferredAuthentications=password -o StrictHostKeyChecking=no $t3_remote_user@$t3_remote_host"
        if [ $? = 0 ]; then
            echo "tunnel 3 (to $t3_remote_host) started"
        else
            echo "failed to start tunnel 3 (to $t3_remote_host)"
        fi
    else
        echo "tunnel 3 (to $t3_remote_host) is already running (pid=$proc3)"
    fi
}

fn_stop() {
    if [ "" = "$proc_main" ]; then
        echo "sshfwd-server is not running"
    else
        kill $proc_main
        if [ $? = 0 ]; then
            echo "sshfwd-server stopped"
        else
            echo "failed stop sshfwd-server"
        fi
    fi

    if [ "" = "$proc0" ]; then
        echo "tunnel 0 is not running"
    else
        su -l $user -c "kill $proc0"
        if [ $? = 0 ]; then
            echo "tunnel 0 stopped"
        else
            echo "failed stop tunnel 0 (to $t0_remote_host, pid=$proc0)"
        fi
    fi

    if [ "" = "$proc1" ]; then
        echo "tunnel 1 is not running"
    else
        su -l $user -c "kill $proc1"
        if [ $? = 0 ]; then
            echo "tunnel 1 stopped"
        else
            echo "failed stop tunnel 1 (to $t1_remote_host, pid=$proc1)"
        fi
    fi

    if [ "" = "$proc2" ]; then
        echo "tunnel 2 is not running"
    else
        su -l $user -c "kill $proc2"
        if [ $? = 0 ]; then
            echo "tunnel 2 stopped"
        else
            echo "failed stop tunnel 2 (to $t2_remote_host, pid=$proc2)"
        fi
    fi

    if [ "" = "$proc3" ]; then
        echo "tunnel 3 is not running"
    else
        su -l $user -c "kill $proc3"
        if [ $? = 0 ]; then
            echo "tunnel 3 stopped"
        else
            echo "failed stop tunnel 3 (to $t3_remote_host, pid=$proc3)"
        fi
    fi
}

fn_restart() {
    fn_stop
    sleep 3
    fn_get_procs
    fn_start
}

fn_status() {
    if [ "" = "$proc_main" ]; then
        echo "sshfwd-server is not running"
    else
        echo "sshfwd-server is running (pid=$proc_main)"
    fi

    if [ "" = "$proc0" ]; then
        echo "tunnel 0 is not running"
    else
        echo "tunnel 0 (to $t0_remote_host) is running (pid=$proc0)"
    fi

    if [ "" = "$proc1" ]; then
        echo "tunnel 1 is not running"
    else
        echo "tunnel 1 (to $t1_remote_host) is running (pid=$proc1)"
    fi

    if [ "" = "$proc2" ]; then
        echo "tunnel 2 is not running"
    else
        echo "tunnel 2 (to $t2_remote_host) is running (pid=$proc2)"
    fi

    if [ "" = "$proc3" ]; then
        echo "tunnel 3 is not running"
    else
        echo "tunnel 3 (to $t3_remote_host) is running (pid=$proc3)"
    fi

    echo ""
    echo "Local port listen info:"
    netstat -tunlp|grep LISTEN|grep tcp|grep -E "$t0_listen_port|$t1_listen_port|$t2_listen_port|$t3_listen_port"
}

fn_monit(){
    if [ "$proc0$proc1$proc2$proc3" = "" ]; then
        echo "sshfwd-server started"
        while :
        do
            sleep 55
            fn_get_procs
            fn_start > /dev/null 2>&1
        done
    else
        echo "sshfwd-server is already running (pid=$proc_main)"
    fi

}

fn_print_usage() {
    echo "Usage: $0 <start|stop|restart|status>"
    return 2
}

case $1 in
    start)
    fn_start
    fn_monit &
    ;;
    stop)
    fn_stop
    ;;
    restart)
    fn_restart
    ;;
    status)
    fn_status
    ;;
    *)
    fn_print_usage
    ;;
esac

exit 0

